// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  displayName String
  role        String   @default("USER") // "USER" or "ADMIN"
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projects    Project[]
  blogPosts   BlogPost[]
  comments    Comment[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String
  content     String?
  image       String?
  technologies String  // JSON string of tech stack array
  githubUrl   String?
  liveUrl     String?
  featured    Boolean  @default(false)
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String

  @@map("projects")
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String?
  content     String
  image       String?
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  tags        String   // JSON string of tags array
  readTime    Int?     // in minutes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  comments    Comment[]

  @@map("blog_posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  blogPost  BlogPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  @@map("comments")
}
